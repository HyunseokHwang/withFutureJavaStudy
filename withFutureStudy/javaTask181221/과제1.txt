
1. 컴파일의 개념 (Library, Path 및 IDE의 환경 설정에 대한 기본 개념)

	[자바 프로그램의 실행 과정]

	원시코드(자바파일) ---javac --->바이트코드(클래스 파일)--java--->
	JVM의 class loader에 의해 class파일과 외부 lib(클래스)를 load한후 verification(코드 검증-악성코드 유무여부등)을 거쳐
	Interpreter에 의해 메인 메서드를 한줄씩 실행해 결과를 내보낸다.
 
	Library : 컴퓨터에서 자주 사용되는 클래스(변수와 메소드)를 프로그램상에 모아놓은 것. 통상 자바에서는 jar파일. 프로그램에서 필요한 것만 가져다 쓸 수 있도록 모아두면
	시간을 아끼고 수정하기 쉽다.
	정적 라이브러리 : .a 확장자를 가지며 관련된 헤더파일을 include하여 사용. 실행 파일에 라이브러리 함수의 코드가 포함된다. 이를 여러 프로그램에서 사용하면
	메모리가 여러 곳에 존재하여 메모리와 하드 디스크 공간을 낭비하게 된다.
	공유 라이브러리 : 정적 라이브러리의 단점을 극복하기 위해 나온 것으로 실행 시 사용가능한 공유 코드를 참조하는 방식으로 링크된다.
 
	JDK 환경변수 설정
	path설정 : 설치된 JDK의 Bin디렉토리 경로 추가해야 이크립스에서 JRE홈을 읽어 감
	Class Path : 자바 가상머신(jvm)이 프로그램을 실행할 때, 클래스 파일을 찾는 기준이 되는 파일 경로
	classpath설정 : .(컴파일된 자바의 클래스 파일을 현재 디렉토리에서 찾겠다는 의미)

	IDE(Integrated Development Environment) : 통합개발환경. 개발을 하면서 사용되는 도구들의 집합
	이클립스, Visual Studio, Xcode, jetbrains 등
 
 
2. mvc 1, 2 구조의 기초
	mvc패턴 : Model-View-Controller 세 부분으로 구성되어 각각 역할 담당한다
	Model : 비지니스 영역의 로직을 처리(데이터를 처리하는 로직)
	View : 사용자가 보게 될 결과 화면
	Controller : 사용자의 입력 처리와 흐름 제어
	
	MVC1패턴 : 사용자의 요청을 JSP가 받는다. HTML과 JAVA코드(디자인 영역과 프로그램 영역)가 JSP 페이지에 섞여 있다.
	장점 : 개발 생산성이 높다.
	단점 : 유지 보수가 어렵고 책임 소재가 불분명하다.
	
	MVC2패턴 : 사용자의 요청을 서블릿이 받는다. 서블릿은 순수자바코드로 이루어진 서버에서 실행되는 작은 프로그램이다.
		서블릿이 사용자로부터 요청을 받으면 모델은 비지니스와 관련된 기능을 제공하는데 서블릿은 이 모델을 이용해 사용자의 요청을 처리한다.
		모델을 사용하여 알맞은 비지니스 로직을 수행한 후 컨트롤러는 사용자에게 보여줄 뷰를 선택하고 선택된 뷰는 결과 화면을 보여준다.
		뷰가 사용자에게 결과 화면을 보여줄 때 데이터가 필요한데 이는 컨트롤러인 서블릿을 통해 전달받는다.
		
3. 클래스와 인스턴스 그리고 패키지의 기본 개념(추상화)

	OOP의 주요 특징
        1. 추상화
        2. 캡슐화
        3. 다형성
        4. 상속성

[추상화(Abstraction)]

 어떤 물체(object)에서 주된 특징을 부각시켜 표현하고,
 나머지 부분은 과감하게 생략하는 것
 OOP에서 사용되는 추상화도 이와 비슷하다.
 한 물체를 대표하는 속성(명사)과 행위(동사)를 
 추출해내는 것을 프로그래밍에서는 추상화 라고 한다.

	[1 클래스의 정의]
		클래스란: 인간 세계의 객체를 추상화 한것
		즉 객체의 설계도라 할 수 있다

		-클래스도 하나의 자료구조다.즉 데이타 타입이다

		선언]

		*클래스의 멤버로는 멤버변수와 메서드등을 갖는다

		접근지정자 [modifier] class 클래스명{//클래스명은 대문자로 시작

			접근지정자 자료형 멤버변수명;
			접근지정자 반환형 메서드

		}
	
	[2  객체 생성 및 멤버접근방법]

		클래스명 인스턴스변수 = new 생성자();

		*클래스 멤버 접근 방법

		인스턴스형멤버(instance)에는 인스턴스변수.멤버로 접근
		정적멤버(static)에는 클래스명.멤버로 접근

		 -멤버변수는 크게 정적멤버 변수와 인스턴스형 멤버변수로 나눈다
		 -멤버메소드도 정적메소드 와 인스턴스형 메소드로 나눈다.
		  
		 -멤버변수나 멤버 메소드 앞에 static이라는 modifier가 붙으면
		   정적 멤버 즉 정적 멤버변수이거나 정적 메소드이다.
		  
		   예] int age;//인스턴스형 멤버변수
		       static int age;//정적 멤버변수
		       
		       public void method(){};//인스턴스형 메소드
		       public static void method(){};//정적 메소드
		       
		       단,class앞에는 static을 붙일 수 없다
		 
		  ※ 정적멤버(변수 혹은 메소드)의 메모리는 JVM에서 
		     클래스를 로드할 시점에 생기고
		     인스턴스형 멤버는 JVM에서 인터프리터 할때 메모리가 생성된다.
		     
		  ※ 클래스의 멤버에 접근시 접근 방법
			 
			 1]인스턴스형 멤버 : 인스턴스형변수.멤버
			 
			   클래스명 인스턴스형변수 = new 생성자();
			   인스턴스형변수.멤버;
			  
			 2]정적 멤버 :클래스명.멤버
			 
			 
	[패키지(package)]

	- 유사한 기능을 가진 클래스와 인터페이스를 묶어 관리하도록 하며 
	   개발이 끝난 후 jar파일로 묶어 배포한다.
	- 패키지 선언은 최상단에 위치해야 한다. import 문 보다도 먼저 와야 한다
	- 패키지명은 소문자로 주로 준다
	- 패키지선언에서 패키지안에 있는 클래스에 접근시에는 .으로 접근한다 
	   즉 패키지명.클래스(예:java.lang.System)
	- 파일 관리시의 디렉토리 개념과 같다. 같은 종류의 파일들을 
	  디렉토리로 묶어서 
	   관리하는것과 같은 개념.
	- java파일에서 패키지를 선언했다는 것은 class파일이 
	  그 패키지(디렉토리)안에 있어야 한다는 의미
	
4. 접근제어 지시자와 정보은닉, 캡슐화

[3 접근 지정자(access modifier)]
	
	접근지정자: 클래스와 클래스간에 access법위를 지정하는 기능

	[접근지정자를 붙일 수 잇는곳]:
	1]접근지정자 [modifier] class 클래스명
	2]접근지정자 final 자료형 멤버상수=초기값:접근지정자와 modifier는 순서는 상관없다
	  final 접근지정자 자료형 멤버상수=초기값
	3]접근지정자 [modifier] 자료형 멤버변수;
	4]접근지정자 [modifier] 반환타입 메소드명;
	  단, class 앞에 붙일 수 있는 접근지정자는 public과 생략형만 붙일 수 있다.

	접근지정자 범위 : private < 생략형 < protected < public

	private: 자기 클래스내에서만 접근 가능
	생략형(디폴트접근 지정자,패키지접근지정자):
	 같은 패키지 안에서만 접근 가능
	protected: 같은 패키지는 물론 다른 패키지일지라도 상속관계가 있으면 접근 가능
	public:어디서나 접근 가능

[은닉화(Encapsulation)]

	- 멤버변수를 캡슐화하되 멤버변수에 접근할 때는 
	  메소드로 접근하도록 한다.

	- 캡슐화 방법
		1. 멤버 변수 앞에 private 접근 지정자를 붙인다.
		   예] private int balance;

		2. 멤버 변수에 값을 할당하고 값을 꺼내올 수 있는 
		   메소드를 만든다.
		   2.1 setter메소드.
			      메소드의 접근 지정자는 public 반환타입은 없고, 매개변수를 받아들이도록 한다
			      setter메소드의 역할:
						 매개변수의 값을 멤버변수에 할당하는 일.
						public void setBalance(int money){
							balance=money;
						}
			
		   2.2 getter메소드
		             메소드들은 반환타입이 있되 매개변수는 받아들이지 않는다.
			     getter메소드의 역할:
						멤버변수 설정된 값을 반환해주는 일

						public int getBalance(){
								return balance;
						}
	
5. 메소드 오버로딩, 클래스 오버라이딩

[다형성(Polymorphism)]

	*메소드와 관련된 개념

	1] 오버로딩(Overloading)-중복정의
	    하나의 클래스 안에서 적용되는 개념으로 같은 
	            이름의 메서드를 여러개 정의 할 수 있다
	    - 메소드명이 동일해야 한다.
	    - 매개변수의 데이터 타입이 다르거나
	    - 매개변수의 갯수가 다르거나 
	       매개변수의 타입이 다른 경우 순서가 다른 경우도 오버로딩이다	    
	    - 메소드의 반환타입은 상관이 없다.

	2] 오버라이딩(Overriding)-재정의
	    상속시에 적용되는개념 즉 부모로부터 상속 받은 메소드를 
	    재정의해서 사용하는 것
	    - 메소드명이 동일해야 한다.
	    - 메소드의 매개변수 갯수, 데이터타입이  같아야 한다.
	    - 메소드의 반환타입도 같아야 한다.
	    - 부모 메서드의 접근 지정자가 
	       public이거나 protected인 경우에만 오버라이딩이 된다.

	    - 부모 메서드가 default 지정자나 private지정자를 
	       가진 메서드를 오버라이딩 한경우
	       자식 고유의 메서드로 처리된다(오버라이딩 한 것이 아님)	
	       //단,default접근 지정자는 다른 패키지에서는
	//접근이 안됨으로 부 모와 자식이 다른 패키지일 경우에만
	       //오버라이딩 한것이 아님.
	      //같은 패키지일 경우는 오버라이딩에 해당

	    - Exception의 경우 부모 클래스의 메소드와 동일하거나 
	      더 구체적인 Exception을
	      발생시켜야 한다.
		  
6. Exception 

[Exception (예외)]

	1] 예외(Exception) :프로그램이 실행되는  과정에서 만나게 되는 오류
	2] 예외의 종류

		1.Checked Exception(컴파일 에러)
		 -컴파일러가 판단 할 수 있는 예외. 즉 실행전에 체크 할 수 있는 예외
		 -컴파일 하기 위해서는 반드시 예외 처리 해야 함(Syntax오류,IOException등)
                 -main에서 던져도 됨 즉 직접try~catch로 처리하지 않고..

		2.Unchecked Exception(런타임 에러)
		  -컴파일러가 판단 할 수 없는 예외.즉 실행시에만 발견되는 에러
		  -JVM이 자동으로 예외를 throws 해 줌으로 예외처리를 하지 않도 된다
		  -RuntimeException게열(NullPointerException,ArithmeticException,ArrayIndexOutOfBoundsException등)
		  -반드시 try catch해야함

		3. Error:치명적 에러로 발생 되더라도 적절한 처리를 할 수 없음
		          Error도 역시 Unchecked Exception에 속함(VirtualMachineError:자바가상머신에러)
		         
	3] 예외 처리 목적
	   프로그램 실행시 발생할 수 있는 상황들을 미리정해놓고, 해당하는 예외가 발생했을 경우
	   적절한 조치를 취해서 프로그램이 정상적으로  작동하도록 하기 위함.

	   예외 처리를 한다는 것은 런타임에러를 잡는 다는 것임.

  
	4] 예외 처리 방법
		1. try~catch문을 이용한 직접 처리: 구체적인 예외 처리 가능
	                try
			{
				예외 발생할 만한  코드
			}
			catch (해당예외클래스  e)
			{
				예외 처리 코드
			}
			*하나의 메소드에서 두개 이상의 Exception이 발생할 경우 
			catch절을 여러 개 사용할 수 있다.
			이 때 catch 절로 Exception을 잡을 때는 
			하위클래스(자식클래스)부터 잡아준다.

			예]숫자 입력 받아서 나누는 경우
			   NumberFormatException  ArithmeticException ..< Excption 
			   NumberFormatException 와 ArithmeticException는 상속관계가 아님으로 위치에는 상관없으나
			   Excepion은 모든 예외 클래스의 부모 임으로 항상 다른 예외 클래스 보다 마지막 catch절에서
			   잡아야 한다

		2. throws 절을 이용한 예외 선언:예외 처리를 직접 하지 않고 메소드를 호출하는 쪽으로 떠 넘긴다

			public void func() 
				throws IOException{
					int number=System.in.read();
			}
			
			*func()를 호출하는 쪽으로 IOException 을 넘겨준다.
		소스 예]
		public static void exFunc() throws Exception {

			out.println("예외를 던지는 메서드");			
			throw new Exception("예외 받아라");
			//예외를 던지는데 받을 곳을 지정 안 한 경우(throws 생략) 에러,
                          throws로 던지던지 자기 자신이 try ~catch로 받던지
			//throw한것은 반드시 어느 한곳에서 try~catch 해야 함 
			    계속 던지기만 하면 안됨
                          //메인에서 최종적으로라도 try~catch 해야 함

			단,throw new ~throws 쌍이 아니라 throws한것은 메인에서도 던질 수 있음
		        또한 Checked 예외는 main에서 던질 수 잇으나 런타임 예외는 메인에서 던져도 예외가 발생
                                                           
		}


		public static void exCatch() throws Exception{//여기서도 예외를 처리 안하고 다시 던짐


			exFunc();		
		}


		public static void main(String[] args) {		

			out.println("프로그램 시작");
			try{
				exCatch();//메인에서 예외 처리
			}
			catch(Exception e){

				out.println(e.getMessage());
			}
			out.println("프로그램 끝");
		}
	
	5] finally 절
	
	   try~catch~finally구문의로 사용하고 예외를 잡거나 
	   예외가 발생하지 않다라도 반드시 한번은 수행되는  블럭이다.
	   심지어 return 문이 오더라도 finally블럭은   반드시 실행된다. 
	   단 System.exit(0)의 경우 실행되지 않고 종료된다.
   
	6] 사용자 정의 예외 클래스
		
	   -사용자가  Exception클래스를 상속받아 사용자만의 예외를 만들 수 있다

	   step1] Exception을 상속받는 클래스를 만든다.
	   step2]생성자를 구성하고, 생성자 안에서 super("예외 메시지");를 호출한다.
	         이 예외 메시지가 getMessage()를 호출할 때 반환되는 메시지가 된다.


	예제]	(1)사용자 정의 클래스 생성

		class NotManException extends Exception
		{
			//생성자를 구성해서 예외 메시지를 전달
			public NotManException(){
				super("여성 전용 클럽입니다!");
			}
			//생성자 오버로딩
			public NotManException(String msg){

				super(msg);
			}
		}
		
		(2)사용자 정의 클래스 사용
		
		class WomanClub
		
		{
			 public void Member(String ssn)	 throws NotManException{//메소드 내부에서 Exceptiondl던져 지고 있다는 의미

				 String tmpStr= ssn.substring(6,7);

				 int femaleOrMale = Integer.parseInt(tmpStr);

				 if(femaleOrMale==1){
					// throw new NotManException();//생성한 예외를 Member메소드를 호출한 곳으로 던짐
                                       // 혹은 오버라이딩한 생성자 호출(예외메시지와 함께)
   
					throw new NotManException("여장 한사람도 안되요!");
				 }
				 System.out.println("가입을 환영합니다");
			 }

		 }

		(3)적용
		class UserException{

			public static void main(String[] args) {		

			WomanClub wc = new WomanClub();
			try{
				wc.Member("1234562111111");
			}
			catch(NotManException e){

				out.println(e.getMessage());
			}
		}

	 *사용자 예외 클래스 객체를 생성해서 throw 라는 키워드로 던져주고, 반드시 메소드 헤더부분에 해당 예외를
	 throws 해줘야 한다.throws를 던져주지 않으면 반드시 에외를 던지는 메소드안에서 try ~ catch로 예외 처리를 해줘야 함

